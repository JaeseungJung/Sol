/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FirstcomeAirdropInterface extends ethers.utils.Interface {
  functions: {
    "ijm()": FunctionFragment;
    "newSeason()": FunctionFragment;
    "airdrop()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "droped(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "setAirdropAmount(uint256)": FunctionFragment;
    "season()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "airdropAmount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ijm", values?: undefined): string;
  encodeFunctionData(functionFragment: "newSeason", values?: undefined): string;
  encodeFunctionData(functionFragment: "airdrop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "droped",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAirdropAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "season", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ijm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newSeason", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "droped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "season", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropAmount",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FirstcomeAirdrop extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FirstcomeAirdropInterface;

  functions: {
    ijm(overrides?: CallOverrides): Promise<[string]>;

    "ijm()"(overrides?: CallOverrides): Promise<[string]>;

    newSeason(overrides?: Overrides): Promise<ContractTransaction>;

    "newSeason()"(overrides?: Overrides): Promise<ContractTransaction>;

    airdrop(overrides?: Overrides): Promise<ContractTransaction>;

    "airdrop()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    droped(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "droped(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    setAirdropAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAirdropAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    season(overrides?: CallOverrides): Promise<[BigNumber]>;

    "season()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    airdropAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "airdropAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ijm(overrides?: CallOverrides): Promise<string>;

  "ijm()"(overrides?: CallOverrides): Promise<string>;

  newSeason(overrides?: Overrides): Promise<ContractTransaction>;

  "newSeason()"(overrides?: Overrides): Promise<ContractTransaction>;

  airdrop(overrides?: Overrides): Promise<ContractTransaction>;

  "airdrop()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  droped(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "droped(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  setAirdropAmount(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAirdropAmount(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  season(overrides?: CallOverrides): Promise<BigNumber>;

  "season()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "airdropAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ijm(overrides?: CallOverrides): Promise<string>;

    "ijm()"(overrides?: CallOverrides): Promise<string>;

    newSeason(overrides?: CallOverrides): Promise<void>;

    "newSeason()"(overrides?: CallOverrides): Promise<void>;

    airdrop(overrides?: CallOverrides): Promise<void>;

    "airdrop()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    droped(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "droped(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    setAirdropAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAirdropAmount(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    "season()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "airdropAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    ijm(overrides?: CallOverrides): Promise<BigNumber>;

    "ijm()"(overrides?: CallOverrides): Promise<BigNumber>;

    newSeason(overrides?: Overrides): Promise<BigNumber>;

    "newSeason()"(overrides?: Overrides): Promise<BigNumber>;

    airdrop(overrides?: Overrides): Promise<BigNumber>;

    "airdrop()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    droped(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "droped(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAirdropAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAirdropAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    "season()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    airdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "airdropAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ijm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ijm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSeason(overrides?: Overrides): Promise<PopulatedTransaction>;

    "newSeason()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    airdrop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "airdrop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    droped(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "droped(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAirdropAmount(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAirdropAmount(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    season(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "season()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    airdropAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "airdropAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
